// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: prediction.proto

package add

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PredictionClient is the client API for Prediction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PredictionClient interface {
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
}

type predictionClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictionClient(cc grpc.ClientConnInterface) PredictionClient {
	return &predictionClient{cc}
}

func (c *predictionClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/add.prediction/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictionServer is the server API for Prediction service.
// All implementations must embed UnimplementedPredictionServer
// for forward compatibility
type PredictionServer interface {
	Add(context.Context, *AddReq) (*AddResp, error)
	mustEmbedUnimplementedPredictionServer()
}

// UnimplementedPredictionServer must be embedded to have forward compatible implementations.
type UnimplementedPredictionServer struct {
}

func (UnimplementedPredictionServer) Add(context.Context, *AddReq) (*AddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPredictionServer) mustEmbedUnimplementedPredictionServer() {}

// UnsafePredictionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PredictionServer will
// result in compilation errors.
type UnsafePredictionServer interface {
	mustEmbedUnimplementedPredictionServer()
}

func RegisterPredictionServer(s grpc.ServiceRegistrar, srv PredictionServer) {
	s.RegisterService(&Prediction_ServiceDesc, srv)
}

func _Prediction_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/add.prediction/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Prediction_ServiceDesc is the grpc.ServiceDesc for Prediction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prediction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "add.prediction",
	HandlerType: (*PredictionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _Prediction_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}
